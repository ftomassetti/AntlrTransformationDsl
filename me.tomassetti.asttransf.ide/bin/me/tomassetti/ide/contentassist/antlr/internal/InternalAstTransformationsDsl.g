/*
 * generated by Xtext 2.9.0.v201505220408
 */
grammar InternalAstTransformationsDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package me.tomassetti.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package me.tomassetti.ide.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import me.tomassetti.services.AstTransformationsDslGrammarAccess;

}

@parser::members {
 
 	private AstTransformationsDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AstTransformationsDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAntlrGrammarRef
entryRuleAntlrGrammarRef 
:
{ before(grammarAccess.getAntlrGrammarRefRule()); }
	 ruleAntlrGrammarRef
{ after(grammarAccess.getAntlrGrammarRefRule()); } 
	 EOF 
;

// Rule AntlrGrammarRef
ruleAntlrGrammarRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAntlrGrammarRefAccess().getGroup()); }
(rule__AntlrGrammarRef__Group__0)
{ after(grammarAccess.getAntlrGrammarRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedEnumDeclaration
entryRuleNamedEnumDeclaration 
:
{ before(grammarAccess.getNamedEnumDeclarationRule()); }
	 ruleNamedEnumDeclaration
{ after(grammarAccess.getNamedEnumDeclarationRule()); } 
	 EOF 
;

// Rule NamedEnumDeclaration
ruleNamedEnumDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getGroup()); }
(rule__NamedEnumDeclaration__Group__0)
{ after(grammarAccess.getNamedEnumDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnnamedEnumDeclaration
entryRuleUnnamedEnumDeclaration 
:
{ before(grammarAccess.getUnnamedEnumDeclarationRule()); }
	 ruleUnnamedEnumDeclaration
{ after(grammarAccess.getUnnamedEnumDeclarationRule()); } 
	 EOF 
;

// Rule UnnamedEnumDeclaration
ruleUnnamedEnumDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getGroup()); }
(rule__UnnamedEnumDeclaration__Group__0)
{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeType
entryRuleNodeType 
:
{ before(grammarAccess.getNodeTypeRule()); }
	 ruleNodeType
{ after(grammarAccess.getNodeTypeRule()); } 
	 EOF 
;

// Rule NodeType
ruleNodeType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTypeAccess().getGroup()); }
(rule__NodeType__Group__0)
{ after(grammarAccess.getNodeTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeTypeField
entryRuleNodeTypeField 
:
{ before(grammarAccess.getNodeTypeFieldRule()); }
	 ruleNodeTypeField
{ after(grammarAccess.getNodeTypeFieldRule()); } 
	 EOF 
;

// Rule NodeTypeField
ruleNodeTypeField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getGroup()); }
(rule__NodeTypeField__Group__0)
{ after(grammarAccess.getNodeTypeFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeTypeFieldValue
entryRuleNodeTypeFieldValue 
:
{ before(grammarAccess.getNodeTypeFieldValueRule()); }
	 ruleNodeTypeFieldValue
{ after(grammarAccess.getNodeTypeFieldValueRule()); } 
	 EOF 
;

// Rule NodeTypeFieldValue
ruleNodeTypeFieldValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTypeFieldValueAccess().getAlternatives()); }
(rule__NodeTypeFieldValue__Alternatives)
{ after(grammarAccess.getNodeTypeFieldValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumNodeTypeFieldValue
entryRuleEnumNodeTypeFieldValue 
:
{ before(grammarAccess.getEnumNodeTypeFieldValueRule()); }
	 ruleEnumNodeTypeFieldValue
{ after(grammarAccess.getEnumNodeTypeFieldValueRule()); } 
	 EOF 
;

// Rule EnumNodeTypeFieldValue
ruleEnumNodeTypeFieldValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumNodeTypeFieldValueAccess().getNameAssignment()); }
(rule__EnumNodeTypeFieldValue__NameAssignment)
{ after(grammarAccess.getEnumNodeTypeFieldValueAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationNodeTypeField
entryRuleRelationNodeTypeField 
:
{ before(grammarAccess.getRelationNodeTypeFieldRule()); }
	 ruleRelationNodeTypeField
{ after(grammarAccess.getRelationNodeTypeFieldRule()); } 
	 EOF 
;

// Rule RelationNodeTypeField
ruleRelationNodeTypeField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationNodeTypeFieldAccess().getTypeAssignment()); }
(rule__RelationNodeTypeField__TypeAssignment)
{ after(grammarAccess.getRelationNodeTypeFieldAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeNodeTypeField
entryRuleAttributeNodeTypeField 
:
{ before(grammarAccess.getAttributeNodeTypeFieldRule()); }
	 ruleAttributeNodeTypeField
{ after(grammarAccess.getAttributeNodeTypeFieldRule()); } 
	 EOF 
;

// Rule AttributeNodeTypeField
ruleAttributeNodeTypeField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeNodeTypeFieldAccess().getGroup()); }
(rule__AttributeNodeTypeField__Group__0)
{ after(grammarAccess.getAttributeNodeTypeFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNodeTypeParserRuleCall_0()); }
	ruleNodeType
{ after(grammarAccess.getDeclarationAccess().getNodeTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getNamedEnumDeclarationParserRuleCall_1()); }
	ruleNamedEnumDeclaration
{ after(grammarAccess.getDeclarationAccess().getNamedEnumDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getManyAssignment_1_0()); }
(rule__NodeTypeField__ManyAssignment_1_0)
{ after(grammarAccess.getNodeTypeFieldAccess().getManyAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getNodeTypeFieldAccess().getOptionalAssignment_1_1()); }
(rule__NodeTypeField__OptionalAssignment_1_1)
{ after(grammarAccess.getNodeTypeFieldAccess().getOptionalAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getNodeTypeFieldAccess().getSingleAssignment_1_2()); }
(rule__NodeTypeField__SingleAssignment_1_2)
{ after(grammarAccess.getNodeTypeFieldAccess().getSingleAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeFieldValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldValueAccess().getUnnamedEnumDeclarationParserRuleCall_0()); }
	ruleUnnamedEnumDeclaration
{ after(grammarAccess.getNodeTypeFieldValueAccess().getUnnamedEnumDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeTypeFieldValueAccess().getRelationNodeTypeFieldParserRuleCall_1()); }
	ruleRelationNodeTypeField
{ after(grammarAccess.getNodeTypeFieldValueAccess().getRelationNodeTypeFieldParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNodeTypeFieldValueAccess().getAttributeNodeTypeFieldParserRuleCall_2()); }
	ruleAttributeNodeTypeField
{ after(grammarAccess.getNodeTypeFieldValueAccess().getAttributeNodeTypeFieldParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeNodeTypeField__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNodeTypeFieldAccess().getStringKeyword_1_0()); }

	'string' 

{ after(grammarAccess.getAttributeNodeTypeFieldAccess().getStringKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getAttributeNodeTypeFieldAccess().getIntKeyword_1_1()); }

	'int' 

{ after(grammarAccess.getAttributeNodeTypeFieldAccess().getIntKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getAttributeNodeTypeFieldAccess().getBooleanKeyword_1_2()); }

	'boolean' 

{ after(grammarAccess.getAttributeNodeTypeFieldAccess().getBooleanKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAntlrAssignment_0()); }
(rule__Model__AntlrAssignment_0)
{ after(grammarAccess.getModelAccess().getAntlrAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAssignment_1()); }
(rule__Model__DeclarationsAssignment_1)*
{ after(grammarAccess.getModelAccess().getDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AntlrGrammarRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AntlrGrammarRef__Group__0__Impl
	rule__AntlrGrammarRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AntlrGrammarRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAntlrGrammarRefAccess().getAdaptKeyword_0()); }

	'adapt' 

{ after(grammarAccess.getAntlrGrammarRefAccess().getAdaptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AntlrGrammarRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AntlrGrammarRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AntlrGrammarRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAntlrGrammarRefAccess().getGrammarFileAssignment_1()); }
(rule__AntlrGrammarRef__GrammarFileAssignment_1)
{ after(grammarAccess.getAntlrGrammarRefAccess().getGrammarFileAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedEnumDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedEnumDeclaration__Group__0__Impl
	rule__NamedEnumDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getNamedEnumDeclarationAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedEnumDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedEnumDeclaration__Group__1__Impl
	rule__NamedEnumDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getNameAssignment_1()); }
(rule__NamedEnumDeclaration__NameAssignment_1)
{ after(grammarAccess.getNamedEnumDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedEnumDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedEnumDeclaration__Group__2__Impl
	rule__NamedEnumDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getNamedEnumDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedEnumDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedEnumDeclaration__Group__3__Impl
	rule__NamedEnumDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getValuesAssignment_3()); }
(rule__NamedEnumDeclaration__ValuesAssignment_3)
{ after(grammarAccess.getNamedEnumDeclarationAccess().getValuesAssignment_3()); }
)
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getValuesAssignment_3()); }
(rule__NamedEnumDeclaration__ValuesAssignment_3)*
{ after(grammarAccess.getNamedEnumDeclarationAccess().getValuesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedEnumDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedEnumDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getNamedEnumDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__UnnamedEnumDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnnamedEnumDeclaration__Group__0__Impl
	rule__UnnamedEnumDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnnamedEnumDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnnamedEnumDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnnamedEnumDeclaration__Group__1__Impl
	rule__UnnamedEnumDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnnamedEnumDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnnamedEnumDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnnamedEnumDeclaration__Group__2__Impl
	rule__UnnamedEnumDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnnamedEnumDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesAssignment_2()); }
(rule__UnnamedEnumDeclaration__ValuesAssignment_2)
{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesAssignment_2()); }
)
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesAssignment_2()); }
(rule__UnnamedEnumDeclaration__ValuesAssignment_2)*
{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnnamedEnumDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnnamedEnumDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnnamedEnumDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NodeType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__0__Impl
	rule__NodeType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getAbstractKeyword_0()); }
(
	'abstract' 
)?
{ after(grammarAccess.getNodeTypeAccess().getAbstractKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__1__Impl
	rule__NodeType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getTypeKeyword_1()); }

	'type' 

{ after(grammarAccess.getNodeTypeAccess().getTypeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__2__Impl
	rule__NodeType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getNameAssignment_2()); }
(rule__NodeType__NameAssignment_2)
{ after(grammarAccess.getNodeTypeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__3__Impl
	rule__NodeType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getGroup_3()); }
(rule__NodeType__Group_3__0)?
{ after(grammarAccess.getNodeTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__4__Impl
	rule__NodeType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getGroup_4()); }
(rule__NodeType__Group_4__0)?
{ after(grammarAccess.getNodeTypeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__5__Impl
	rule__NodeType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getNodeTypeAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__6__Impl
	rule__NodeType__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getFieldsAssignment_6()); }
(rule__NodeType__FieldsAssignment_6)*
{ after(grammarAccess.getNodeTypeAccess().getFieldsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getNodeTypeAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__NodeType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group_3__0__Impl
	rule__NodeType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getExtendsKeyword_3_0()); }

	'extends' 

{ after(grammarAccess.getNodeTypeAccess().getExtendsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getSuperTypeAssignment_3_1()); }
(rule__NodeType__SuperTypeAssignment_3_1)
{ after(grammarAccess.getNodeTypeAccess().getSuperTypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeType__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group_4__0__Impl
	rule__NodeType__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getFromKeyword_4_0()); }

	'from' 

{ after(grammarAccess.getNodeTypeAccess().getFromKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeType__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeType__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getAntlrNodeAssignment_4_1()); }
(rule__NodeType__AntlrNodeAssignment_4_1)
{ after(grammarAccess.getNodeTypeAccess().getAntlrNodeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeTypeField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeField__Group__0__Impl
	rule__NodeTypeField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getNameAssignment_0()); }
(rule__NodeTypeField__NameAssignment_0)
{ after(grammarAccess.getNodeTypeFieldAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeTypeField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeField__Group__1__Impl
	rule__NodeTypeField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getAlternatives_1()); }
(rule__NodeTypeField__Alternatives_1)
{ after(grammarAccess.getNodeTypeFieldAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeTypeField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeField__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getValueAssignment_2()); }
(rule__NodeTypeField__ValueAssignment_2)
{ after(grammarAccess.getNodeTypeFieldAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeNodeTypeField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeNodeTypeField__Group__0__Impl
	rule__AttributeNodeTypeField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeNodeTypeField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNodeTypeFieldAccess().getAttributeNodeTypeFieldAction_0()); }
(

)
{ after(grammarAccess.getAttributeNodeTypeFieldAccess().getAttributeNodeTypeFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeNodeTypeField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeNodeTypeField__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeNodeTypeField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNodeTypeFieldAccess().getAlternatives_1()); }
(rule__AttributeNodeTypeField__Alternatives_1)
{ after(grammarAccess.getAttributeNodeTypeFieldAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__AntlrAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAntlrAntlrGrammarRefParserRuleCall_0_0()); }
	ruleAntlrGrammarRef{ after(grammarAccess.getModelAccess().getAntlrAntlrGrammarRefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
	ruleDeclaration{ after(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AntlrGrammarRef__GrammarFileAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAntlrGrammarRefAccess().getGrammarFileSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAntlrGrammarRefAccess().getGrammarFileSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNamedEnumDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedEnumDeclaration__ValuesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedEnumDeclarationAccess().getValuesEnumNodeTypeFieldValueParserRuleCall_3_0()); }
	ruleEnumNodeTypeFieldValue{ after(grammarAccess.getNamedEnumDeclarationAccess().getValuesEnumNodeTypeFieldValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnnamedEnumDeclaration__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesEnumNodeTypeFieldValueParserRuleCall_2_0()); }
	ruleEnumNodeTypeFieldValue{ after(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesEnumNodeTypeFieldValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getNodeTypeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__SuperTypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getSuperTypeNodeTypeCrossReference_3_1_0()); }
(
{ before(grammarAccess.getNodeTypeAccess().getSuperTypeNodeTypeIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeTypeAccess().getSuperTypeNodeTypeIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getNodeTypeAccess().getSuperTypeNodeTypeCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__AntlrNodeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getAntlrNodeIDTerminalRuleCall_4_1_0()); }
	RULE_ID{ after(grammarAccess.getNodeTypeAccess().getAntlrNodeIDTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__FieldsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getFieldsNodeTypeFieldParserRuleCall_6_0()); }
	ruleNodeTypeField{ after(grammarAccess.getNodeTypeAccess().getFieldsNodeTypeFieldParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNodeTypeFieldAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__ManyAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getManyAsteriskEqualsSignKeyword_1_0_0()); }
(
{ before(grammarAccess.getNodeTypeFieldAccess().getManyAsteriskEqualsSignKeyword_1_0_0()); }

	'*=' 

{ after(grammarAccess.getNodeTypeFieldAccess().getManyAsteriskEqualsSignKeyword_1_0_0()); }
)

{ after(grammarAccess.getNodeTypeFieldAccess().getManyAsteriskEqualsSignKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__OptionalAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getOptionalQuestionMarkEqualsSignKeyword_1_1_0()); }
(
{ before(grammarAccess.getNodeTypeFieldAccess().getOptionalQuestionMarkEqualsSignKeyword_1_1_0()); }

	'?=' 

{ after(grammarAccess.getNodeTypeFieldAccess().getOptionalQuestionMarkEqualsSignKeyword_1_1_0()); }
)

{ after(grammarAccess.getNodeTypeFieldAccess().getOptionalQuestionMarkEqualsSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__SingleAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getSingleEqualsSignKeyword_1_2_0()); }
(
{ before(grammarAccess.getNodeTypeFieldAccess().getSingleEqualsSignKeyword_1_2_0()); }

	'=' 

{ after(grammarAccess.getNodeTypeFieldAccess().getSingleEqualsSignKeyword_1_2_0()); }
)

{ after(grammarAccess.getNodeTypeFieldAccess().getSingleEqualsSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeField__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeFieldAccess().getValueNodeTypeFieldValueParserRuleCall_2_0()); }
	ruleNodeTypeFieldValue{ after(grammarAccess.getNodeTypeFieldAccess().getValueNodeTypeFieldValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumNodeTypeFieldValue__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumNodeTypeFieldValueAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getEnumNodeTypeFieldValueAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNodeTypeField__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationNodeTypeFieldAccess().getTypeNodeTypeCrossReference_0()); }
(
{ before(grammarAccess.getRelationNodeTypeFieldAccess().getTypeNodeTypeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getRelationNodeTypeFieldAccess().getTypeNodeTypeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getRelationNodeTypeFieldAccess().getTypeNodeTypeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


