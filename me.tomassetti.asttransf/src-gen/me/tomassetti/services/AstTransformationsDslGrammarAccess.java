/*
 * generated by Xtext 2.9.0.v201505220408
 */
package me.tomassetti.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AstTransformationsDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAntlrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAntlrAntlrGrammarRefParserRuleCall_0_0 = (RuleCall)cAntlrAssignment_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		//Model:
		//	antlr=AntlrGrammarRef //'transformations' transformations+=Transformation*;
		//	declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }

		//antlr=AntlrGrammarRef //'transformations' transformations+=Transformation*;
		//declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//antlr=AntlrGrammarRef
		public Assignment getAntlrAssignment_0() { return cAntlrAssignment_0; }

		//AntlrGrammarRef
		public RuleCall getAntlrAntlrGrammarRefParserRuleCall_0_0() { return cAntlrAntlrGrammarRefParserRuleCall_0_0; }

		////'transformations' transformations+=Transformation*;
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
	}

	public class AntlrGrammarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AntlrGrammarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdaptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGrammarFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGrammarFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cGrammarFileAssignment_1.eContents().get(0);
		
		//AntlrGrammarRef:
		//	"adapt" grammarFile=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"adapt" grammarFile=STRING
		public Group getGroup() { return cGroup; }

		//"adapt"
		public Keyword getAdaptKeyword_0() { return cAdaptKeyword_0; }

		//grammarFile=STRING
		public Assignment getGrammarFileAssignment_1() { return cGrammarFileAssignment_1; }

		//STRING
		public RuleCall getGrammarFileSTRINGTerminalRuleCall_1_0() { return cGrammarFileSTRINGTerminalRuleCall_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedEnumDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//	NodeType | NamedEnumDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//NodeType | NamedEnumDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//NodeType
		public RuleCall getNodeTypeParserRuleCall_0() { return cNodeTypeParserRuleCall_0; }

		//NamedEnumDeclaration
		public RuleCall getNamedEnumDeclarationParserRuleCall_1() { return cNamedEnumDeclarationParserRuleCall_1; }
	}

	public class NamedEnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedEnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesEnumNodeTypeFieldValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NamedEnumDeclaration:
		//	"enum" name=ID "{" values+=EnumNodeTypeFieldValue+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" values+=EnumNodeTypeFieldValue+ "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//values+=EnumNodeTypeFieldValue+
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//EnumNodeTypeFieldValue
		public RuleCall getValuesEnumNodeTypeFieldValueParserRuleCall_3_0() { return cValuesEnumNodeTypeFieldValueParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class UnnamedEnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedEnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesEnumNodeTypeFieldValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnnamedEnumDeclaration:
		//	"enum" "{" values+=EnumNodeTypeFieldValue+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" "{" values+=EnumNodeTypeFieldValue+ "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//values+=EnumNodeTypeFieldValue+
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//EnumNodeTypeFieldValue
		public RuleCall getValuesEnumNodeTypeFieldValueParserRuleCall_2_0() { return cValuesEnumNodeTypeFieldValueParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class NodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeNodeTypeCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeNodeTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperTypeNodeTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFromKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAntlrNodeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAntlrNodeIDTerminalRuleCall_4_1_0 = (RuleCall)cAntlrNodeAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFieldsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsNodeTypeFieldParserRuleCall_6_0 = (RuleCall)cFieldsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NodeType:
		//	"abstract"? "type" name=ID ("extends" superType=[NodeType])? ("from" antlrNode=ID)? "{" fields+=NodeTypeField* "}";
		@Override public ParserRule getRule() { return rule; }

		//"abstract"? "type" name=ID ("extends" superType=[NodeType])? ("from" antlrNode=ID)? "{" fields+=NodeTypeField* "}"
		public Group getGroup() { return cGroup; }

		//"abstract"?
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superType=[NodeType])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=[NodeType]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//[NodeType]
		public CrossReference getSuperTypeNodeTypeCrossReference_3_1_0() { return cSuperTypeNodeTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getSuperTypeNodeTypeIDTerminalRuleCall_3_1_0_1() { return cSuperTypeNodeTypeIDTerminalRuleCall_3_1_0_1; }

		//("from" antlrNode=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"from"
		public Keyword getFromKeyword_4_0() { return cFromKeyword_4_0; }

		//antlrNode=ID
		public Assignment getAntlrNodeAssignment_4_1() { return cAntlrNodeAssignment_4_1; }

		//ID
		public RuleCall getAntlrNodeIDTerminalRuleCall_4_1_0() { return cAntlrNodeIDTerminalRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//fields+=NodeTypeField*
		public Assignment getFieldsAssignment_6() { return cFieldsAssignment_6; }

		//NodeTypeField
		public RuleCall getFieldsNodeTypeFieldParserRuleCall_6_0() { return cFieldsNodeTypeFieldParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class NodeTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cManyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cManyAsteriskEqualsSignKeyword_1_0_0 = (Keyword)cManyAssignment_1_0.eContents().get(0);
		private final Assignment cOptionalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cOptionalQuestionMarkEqualsSignKeyword_1_1_0 = (Keyword)cOptionalAssignment_1_1.eContents().get(0);
		private final Assignment cSingleAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cSingleEqualsSignKeyword_1_2_0 = (Keyword)cSingleAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNodeTypeFieldValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NodeTypeField:
		//	name=ID (many="*=" | optional="?=" | single="=") value=NodeTypeFieldValue;
		@Override public ParserRule getRule() { return rule; }

		//name=ID (many="*=" | optional="?=" | single="=") value=NodeTypeFieldValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//many="*=" | optional="?=" | single="="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//many="*="
		public Assignment getManyAssignment_1_0() { return cManyAssignment_1_0; }

		//"*="
		public Keyword getManyAsteriskEqualsSignKeyword_1_0_0() { return cManyAsteriskEqualsSignKeyword_1_0_0; }

		//optional="?="
		public Assignment getOptionalAssignment_1_1() { return cOptionalAssignment_1_1; }

		//"?="
		public Keyword getOptionalQuestionMarkEqualsSignKeyword_1_1_0() { return cOptionalQuestionMarkEqualsSignKeyword_1_1_0; }

		//single="="
		public Assignment getSingleAssignment_1_2() { return cSingleAssignment_1_2; }

		//"="
		public Keyword getSingleEqualsSignKeyword_1_2_0() { return cSingleEqualsSignKeyword_1_2_0; }

		//value=NodeTypeFieldValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//NodeTypeFieldValue
		public RuleCall getValueNodeTypeFieldValueParserRuleCall_2_0() { return cValueNodeTypeFieldValueParserRuleCall_2_0; }
	}

	public class NodeTypeFieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTypeFieldValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnnamedEnumDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationNodeTypeFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeNodeTypeFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NodeTypeFieldValue:
		//	UnnamedEnumDeclaration | RelationNodeTypeField | AttributeNodeTypeField;
		@Override public ParserRule getRule() { return rule; }

		//UnnamedEnumDeclaration | RelationNodeTypeField | AttributeNodeTypeField
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnnamedEnumDeclaration
		public RuleCall getUnnamedEnumDeclarationParserRuleCall_0() { return cUnnamedEnumDeclarationParserRuleCall_0; }

		//RelationNodeTypeField
		public RuleCall getRelationNodeTypeFieldParserRuleCall_1() { return cRelationNodeTypeFieldParserRuleCall_1; }

		//AttributeNodeTypeField
		public RuleCall getAttributeNodeTypeFieldParserRuleCall_2() { return cAttributeNodeTypeFieldParserRuleCall_2; }
	}

	public class EnumNodeTypeFieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumNodeTypeFieldValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumNodeTypeFieldValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RelationNodeTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationNodeTypeField");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeNodeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeNodeTypeIDTerminalRuleCall_0_1 = (RuleCall)cTypeNodeTypeCrossReference_0.eContents().get(1);
		
		//RelationNodeTypeField:
		//	type=[NodeType];
		@Override public ParserRule getRule() { return rule; }

		//type=[NodeType]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[NodeType]
		public CrossReference getTypeNodeTypeCrossReference_0() { return cTypeNodeTypeCrossReference_0; }

		//ID
		public RuleCall getTypeNodeTypeIDTerminalRuleCall_0_1() { return cTypeNodeTypeIDTerminalRuleCall_0_1; }
	}

	public class AttributeNodeTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeNodeTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeNodeTypeFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cStringKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cBooleanKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		////Transformation:
		////	'transf' name=ID ;
		//AttributeNodeTypeField:
		//	{AttributeNodeTypeField} ("string" | "int" | "boolean");
		@Override public ParserRule getRule() { return rule; }

		//{AttributeNodeTypeField} ("string" | "int" | "boolean") //Transformation:
		////	'transf' name=ID ;
		public Group getGroup() { return cGroup; }

		//{AttributeNodeTypeField}
		public Action getAttributeNodeTypeFieldAction_0() { return cAttributeNodeTypeFieldAction_0; }

		//"string" //Transformation:
		////	'transf' name=ID ;
		//| "int" | "boolean"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"string"
		public Keyword getStringKeyword_1_0() { return cStringKeyword_1_0; }

		//"int"
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }

		//"boolean"
		public Keyword getBooleanKeyword_1_2() { return cBooleanKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final AntlrGrammarRefElements pAntlrGrammarRef;
	private final DeclarationElements pDeclaration;
	private final NamedEnumDeclarationElements pNamedEnumDeclaration;
	private final UnnamedEnumDeclarationElements pUnnamedEnumDeclaration;
	private final NodeTypeElements pNodeType;
	private final NodeTypeFieldElements pNodeTypeField;
	private final NodeTypeFieldValueElements pNodeTypeFieldValue;
	private final EnumNodeTypeFieldValueElements pEnumNodeTypeFieldValue;
	private final RelationNodeTypeFieldElements pRelationNodeTypeField;
	private final AttributeNodeTypeFieldElements pAttributeNodeTypeField;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AstTransformationsDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAntlrGrammarRef = new AntlrGrammarRefElements();
		this.pDeclaration = new DeclarationElements();
		this.pNamedEnumDeclaration = new NamedEnumDeclarationElements();
		this.pUnnamedEnumDeclaration = new UnnamedEnumDeclarationElements();
		this.pNodeType = new NodeTypeElements();
		this.pNodeTypeField = new NodeTypeFieldElements();
		this.pNodeTypeFieldValue = new NodeTypeFieldValueElements();
		this.pEnumNodeTypeFieldValue = new EnumNodeTypeFieldValueElements();
		this.pRelationNodeTypeField = new RelationNodeTypeFieldElements();
		this.pAttributeNodeTypeField = new AttributeNodeTypeFieldElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("me.tomassetti.AstTransformationsDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	antlr=AntlrGrammarRef //'transformations' transformations+=Transformation*;
	//	declarations+=Declaration*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//AntlrGrammarRef:
	//	"adapt" grammarFile=STRING;
	public AntlrGrammarRefElements getAntlrGrammarRefAccess() {
		return pAntlrGrammarRef;
	}
	
	public ParserRule getAntlrGrammarRefRule() {
		return getAntlrGrammarRefAccess().getRule();
	}

	//Declaration:
	//	NodeType | NamedEnumDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//NamedEnumDeclaration:
	//	"enum" name=ID "{" values+=EnumNodeTypeFieldValue+ "}";
	public NamedEnumDeclarationElements getNamedEnumDeclarationAccess() {
		return pNamedEnumDeclaration;
	}
	
	public ParserRule getNamedEnumDeclarationRule() {
		return getNamedEnumDeclarationAccess().getRule();
	}

	//UnnamedEnumDeclaration:
	//	"enum" "{" values+=EnumNodeTypeFieldValue+ "}";
	public UnnamedEnumDeclarationElements getUnnamedEnumDeclarationAccess() {
		return pUnnamedEnumDeclaration;
	}
	
	public ParserRule getUnnamedEnumDeclarationRule() {
		return getUnnamedEnumDeclarationAccess().getRule();
	}

	//NodeType:
	//	"abstract"? "type" name=ID ("extends" superType=[NodeType])? ("from" antlrNode=ID)? "{" fields+=NodeTypeField* "}";
	public NodeTypeElements getNodeTypeAccess() {
		return pNodeType;
	}
	
	public ParserRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}

	//NodeTypeField:
	//	name=ID (many="*=" | optional="?=" | single="=") value=NodeTypeFieldValue;
	public NodeTypeFieldElements getNodeTypeFieldAccess() {
		return pNodeTypeField;
	}
	
	public ParserRule getNodeTypeFieldRule() {
		return getNodeTypeFieldAccess().getRule();
	}

	//NodeTypeFieldValue:
	//	UnnamedEnumDeclaration | RelationNodeTypeField | AttributeNodeTypeField;
	public NodeTypeFieldValueElements getNodeTypeFieldValueAccess() {
		return pNodeTypeFieldValue;
	}
	
	public ParserRule getNodeTypeFieldValueRule() {
		return getNodeTypeFieldValueAccess().getRule();
	}

	//EnumNodeTypeFieldValue:
	//	name=ID;
	public EnumNodeTypeFieldValueElements getEnumNodeTypeFieldValueAccess() {
		return pEnumNodeTypeFieldValue;
	}
	
	public ParserRule getEnumNodeTypeFieldValueRule() {
		return getEnumNodeTypeFieldValueAccess().getRule();
	}

	//RelationNodeTypeField:
	//	type=[NodeType];
	public RelationNodeTypeFieldElements getRelationNodeTypeFieldAccess() {
		return pRelationNodeTypeField;
	}
	
	public ParserRule getRelationNodeTypeFieldRule() {
		return getRelationNodeTypeFieldAccess().getRule();
	}

	////Transformation:
	////	'transf' name=ID ;
	//AttributeNodeTypeField:
	//	{AttributeNodeTypeField} ("string" | "int" | "boolean");
	public AttributeNodeTypeFieldElements getAttributeNodeTypeFieldAccess() {
		return pAttributeNodeTypeField;
	}
	
	public ParserRule getAttributeNodeTypeFieldRule() {
		return getAttributeNodeTypeFieldAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
