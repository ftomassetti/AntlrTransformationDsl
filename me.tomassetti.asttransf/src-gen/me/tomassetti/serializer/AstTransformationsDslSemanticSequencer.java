/*
 * generated by Xtext 2.9.0.v201505220408
 */
package me.tomassetti.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import me.tomassetti.astTransformationsDsl.AntlrGrammarRef;
import me.tomassetti.astTransformationsDsl.AstTransformationsDslPackage;
import me.tomassetti.astTransformationsDsl.AttributeNodeTypeField;
import me.tomassetti.astTransformationsDsl.EnumNodeTypeFieldValue;
import me.tomassetti.astTransformationsDsl.Model;
import me.tomassetti.astTransformationsDsl.NamedEnumDeclaration;
import me.tomassetti.astTransformationsDsl.NodeType;
import me.tomassetti.astTransformationsDsl.NodeTypeField;
import me.tomassetti.astTransformationsDsl.RelationNodeTypeField;
import me.tomassetti.astTransformationsDsl.UnnamedEnumDeclaration;
import me.tomassetti.services.AstTransformationsDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AstTransformationsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AstTransformationsDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == AstTransformationsDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case AstTransformationsDslPackage.ANTLR_GRAMMAR_REF:
				sequence_AntlrGrammarRef(context, (AntlrGrammarRef) semanticObject); 
				return; 
			case AstTransformationsDslPackage.ATTRIBUTE_NODE_TYPE_FIELD:
				sequence_AttributeNodeTypeField(context, (AttributeNodeTypeField) semanticObject); 
				return; 
			case AstTransformationsDslPackage.ENUM_NODE_TYPE_FIELD_VALUE:
				sequence_EnumNodeTypeFieldValue(context, (EnumNodeTypeFieldValue) semanticObject); 
				return; 
			case AstTransformationsDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AstTransformationsDslPackage.NAMED_ENUM_DECLARATION:
				sequence_NamedEnumDeclaration(context, (NamedEnumDeclaration) semanticObject); 
				return; 
			case AstTransformationsDslPackage.NODE_TYPE:
				sequence_NodeType(context, (NodeType) semanticObject); 
				return; 
			case AstTransformationsDslPackage.NODE_TYPE_FIELD:
				sequence_NodeTypeField(context, (NodeTypeField) semanticObject); 
				return; 
			case AstTransformationsDslPackage.RELATION_NODE_TYPE_FIELD:
				sequence_RelationNodeTypeField(context, (RelationNodeTypeField) semanticObject); 
				return; 
			case AstTransformationsDslPackage.UNNAMED_ENUM_DECLARATION:
				sequence_UnnamedEnumDeclaration(context, (UnnamedEnumDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     grammarFile=STRING
	 */
	protected void sequence_AntlrGrammarRef(EObject context, AntlrGrammarRef semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AstTransformationsDslPackage.Literals.ANTLR_GRAMMAR_REF__GRAMMAR_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstTransformationsDslPackage.Literals.ANTLR_GRAMMAR_REF__GRAMMAR_FILE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAntlrGrammarRefAccess().getGrammarFileSTRINGTerminalRuleCall_1_0(), semanticObject.getGrammarFile());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     {AttributeNodeTypeField}
	 */
	protected void sequence_AttributeNodeTypeField(EObject context, AttributeNodeTypeField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnumNodeTypeFieldValue(EObject context, EnumNodeTypeFieldValue semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AstTransformationsDslPackage.Literals.ENUM_NODE_TYPE_FIELD_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstTransformationsDslPackage.Literals.ENUM_NODE_TYPE_FIELD_VALUE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEnumNodeTypeFieldValueAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (antlr=AntlrGrammarRef declarations+=Declaration*)
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID values+=EnumNodeTypeFieldValue+)
	 */
	protected void sequence_NamedEnumDeclaration(EObject context, NamedEnumDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID (many='*=' | optional='?=' | single='=') value=NodeTypeFieldValue)
	 */
	protected void sequence_NodeTypeField(EObject context, NodeTypeField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID superType=[NodeType|ID]? antlrNode=ID? fields+=NodeTypeField*)
	 */
	protected void sequence_NodeType(EObject context, NodeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=[NodeType|ID]
	 */
	protected void sequence_RelationNodeTypeField(EObject context, RelationNodeTypeField semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AstTransformationsDslPackage.Literals.RELATION_NODE_TYPE_FIELD__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstTransformationsDslPackage.Literals.RELATION_NODE_TYPE_FIELD__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRelationNodeTypeFieldAccess().getTypeNodeTypeIDTerminalRuleCall_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     values+=EnumNodeTypeFieldValue+
	 */
	protected void sequence_UnnamedEnumDeclaration(EObject context, UnnamedEnumDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
