/*
 * generated by Xtext 2.9.0.v201505220408
 */
grammar InternalAstTransformationsDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package me.tomassetti.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package me.tomassetti.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import me.tomassetti.services.AstTransformationsDslGrammarAccess;

}

@parser::members {

 	private AstTransformationsDslGrammarAccess grammarAccess;
 	
    public InternalAstTransformationsDslParser(TokenStream input, AstTransformationsDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AstTransformationsDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAntlrAntlrGrammarRefParserRuleCall_0_0()); 
	    }
		lv_antlr_0_0=ruleAntlrGrammarRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"antlr",
        		lv_antlr_0_0, 
        		"AntlrGrammarRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_1_0()); 
	    }
		lv_declarations_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAntlrGrammarRef
entryRuleAntlrGrammarRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAntlrGrammarRefRule()); }
	 iv_ruleAntlrGrammarRef=ruleAntlrGrammarRef 
	 { $current=$iv_ruleAntlrGrammarRef.current; } 
	 EOF 
;

// Rule AntlrGrammarRef
ruleAntlrGrammarRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='adapt' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAntlrGrammarRefAccess().getAdaptKeyword_0());
    }
(
(
		lv_grammarFile_1_0=RULE_STRING
		{
			newLeafNode(lv_grammarFile_1_0, grammarAccess.getAntlrGrammarRefAccess().getGrammarFileSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAntlrGrammarRefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"grammarFile",
        		lv_grammarFile_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getNodeTypeParserRuleCall_0()); 
    }
    this_NodeType_0=ruleNodeType
    { 
        $current = $this_NodeType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getNamedEnumDeclarationParserRuleCall_1()); 
    }
    this_NamedEnumDeclaration_1=ruleNamedEnumDeclaration
    { 
        $current = $this_NamedEnumDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamedEnumDeclaration
entryRuleNamedEnumDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedEnumDeclarationRule()); }
	 iv_ruleNamedEnumDeclaration=ruleNamedEnumDeclaration 
	 { $current=$iv_ruleNamedEnumDeclaration.current; } 
	 EOF 
;

// Rule NamedEnumDeclaration
ruleNamedEnumDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamedEnumDeclarationAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNamedEnumDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedEnumDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamedEnumDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedEnumDeclarationAccess().getValuesEnumNodeTypeFieldValueParserRuleCall_3_0()); 
	    }
		lv_values_3_0=ruleEnumNodeTypeFieldValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedEnumDeclarationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"EnumNodeTypeFieldValue");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNamedEnumDeclarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleUnnamedEnumDeclaration
entryRuleUnnamedEnumDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnnamedEnumDeclarationRule()); }
	 iv_ruleUnnamedEnumDeclaration=ruleUnnamedEnumDeclaration 
	 { $current=$iv_ruleUnnamedEnumDeclaration.current; } 
	 EOF 
;

// Rule UnnamedEnumDeclaration
ruleUnnamedEnumDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedEnumDeclarationAccess().getEnumKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedEnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedEnumDeclarationAccess().getValuesEnumNodeTypeFieldValueParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleEnumNodeTypeFieldValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedEnumDeclarationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"EnumNodeTypeFieldValue");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnnamedEnumDeclarationAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleNodeType
entryRuleNodeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeTypeRule()); }
	 iv_ruleNodeType=ruleNodeType 
	 { $current=$iv_ruleNodeType.current; } 
	 EOF 
;

// Rule NodeType
ruleNodeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='abstract' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeTypeAccess().getAbstractKeyword_0());
    }
)?	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeTypeAccess().getTypeKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNodeTypeAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodeTypeAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getNodeTypeAccess().getSuperTypeNodeTypeCrossReference_3_1_0()); 
	}

)
))?(	otherlv_5='from' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNodeTypeAccess().getFromKeyword_4_0());
    }
(
(
		lv_antlrNode_6_0=RULE_ID
		{
			newLeafNode(lv_antlrNode_6_0, grammarAccess.getNodeTypeAccess().getAntlrNodeIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"antlrNode",
        		lv_antlrNode_6_0, 
        		"ID");
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNodeTypeAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeTypeAccess().getFieldsNodeTypeFieldParserRuleCall_6_0()); 
	    }
		lv_fields_8_0=ruleNodeTypeField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_8_0, 
        		"NodeTypeField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNodeTypeAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleNodeTypeField
entryRuleNodeTypeField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeTypeFieldRule()); }
	 iv_ruleNodeTypeField=ruleNodeTypeField 
	 { $current=$iv_ruleNodeTypeField.current; } 
	 EOF 
;

// Rule NodeTypeField
ruleNodeTypeField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNodeTypeFieldAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((
(
		lv_many_1_0=	'*=' 
    {
        newLeafNode(lv_many_1_0, grammarAccess.getNodeTypeFieldAccess().getManyAsteriskEqualsSignKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeFieldRule());
	        }
       		setWithLastConsumed($current, "many", lv_many_1_0, "*=");
	    }

)
)
    |(
(
		lv_optional_2_0=	'?=' 
    {
        newLeafNode(lv_optional_2_0, grammarAccess.getNodeTypeFieldAccess().getOptionalQuestionMarkEqualsSignKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeFieldRule());
	        }
       		setWithLastConsumed($current, "optional", lv_optional_2_0, "?=");
	    }

)
)
    |(
(
		lv_single_3_0=	'=' 
    {
        newLeafNode(lv_single_3_0, grammarAccess.getNodeTypeFieldAccess().getSingleEqualsSignKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeFieldRule());
	        }
       		setWithLastConsumed($current, "single", lv_single_3_0, "=");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeTypeFieldAccess().getValueNodeTypeFieldValueParserRuleCall_2_0()); 
	    }
		lv_value_4_0=ruleNodeTypeFieldValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeTypeFieldRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"NodeTypeFieldValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNodeTypeFieldValue
entryRuleNodeTypeFieldValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeTypeFieldValueRule()); }
	 iv_ruleNodeTypeFieldValue=ruleNodeTypeFieldValue 
	 { $current=$iv_ruleNodeTypeFieldValue.current; } 
	 EOF 
;

// Rule NodeTypeFieldValue
ruleNodeTypeFieldValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeTypeFieldValueAccess().getUnnamedEnumDeclarationParserRuleCall_0()); 
    }
    this_UnnamedEnumDeclaration_0=ruleUnnamedEnumDeclaration
    { 
        $current = $this_UnnamedEnumDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeFieldValueAccess().getRelationNodeTypeFieldParserRuleCall_1()); 
    }
    this_RelationNodeTypeField_1=ruleRelationNodeTypeField
    { 
        $current = $this_RelationNodeTypeField_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeFieldValueAccess().getAttributeNodeTypeFieldParserRuleCall_2()); 
    }
    this_AttributeNodeTypeField_2=ruleAttributeNodeTypeField
    { 
        $current = $this_AttributeNodeTypeField_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnumNodeTypeFieldValue
entryRuleEnumNodeTypeFieldValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumNodeTypeFieldValueRule()); }
	 iv_ruleEnumNodeTypeFieldValue=ruleEnumNodeTypeFieldValue 
	 { $current=$iv_ruleEnumNodeTypeFieldValue.current; } 
	 EOF 
;

// Rule EnumNodeTypeFieldValue
ruleEnumNodeTypeFieldValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumNodeTypeFieldValueAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumNodeTypeFieldValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleRelationNodeTypeField
entryRuleRelationNodeTypeField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationNodeTypeFieldRule()); }
	 iv_ruleRelationNodeTypeField=ruleRelationNodeTypeField 
	 { $current=$iv_ruleRelationNodeTypeField.current; } 
	 EOF 
;

// Rule RelationNodeTypeField
ruleRelationNodeTypeField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationNodeTypeFieldRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRelationNodeTypeFieldAccess().getTypeNodeTypeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleAttributeNodeTypeField
entryRuleAttributeNodeTypeField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNodeTypeFieldRule()); }
	 iv_ruleAttributeNodeTypeField=ruleAttributeNodeTypeField 
	 { $current=$iv_ruleAttributeNodeTypeField.current; } 
	 EOF 
;

// Rule AttributeNodeTypeField
ruleAttributeNodeTypeField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeNodeTypeFieldAccess().getAttributeNodeTypeFieldAction_0(),
            $current);
    }
)(	otherlv_1='string' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeNodeTypeFieldAccess().getStringKeyword_1_0());
    }

    |	otherlv_2='int' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeNodeTypeFieldAccess().getIntKeyword_1_1());
    }

    |	otherlv_3='boolean' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttributeNodeTypeFieldAccess().getBooleanKeyword_1_2());
    }
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


